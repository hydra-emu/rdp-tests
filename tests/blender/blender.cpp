#include <common.hxx>
#include "usb.h"

#define TSIZE 24

void triangle(float off_x, float off_y)
{
    std::array<float, 2> coeffs1 = { off_x + 0, off_y + 0 };
    std::array<float, 2> coeffs2 = { off_x + TSIZE, off_y + 0 };
    std::array<float, 2> coeffs3 = { off_x + 0, off_y + TSIZE };

    rdpq_triangle(&TRIFMT_FILL,
        coeffs1.data(),
        coeffs2.data(),
        coeffs3.data()
    );
}

void f_triangle(float off_x, float off_y)
{
    std::array<float, 2> coeffs1 = { off_x + TSIZE, off_y + 0 };
    std::array<float, 2> coeffs2 = { off_x + TSIZE, off_y + TSIZE };
    std::array<float, 2> coeffs3 = { off_x + 0, off_y + TSIZE };

    rdpq_triangle(&TRIFMT_FILL,
        coeffs1.data(),
        coeffs2.data(),
        coeffs3.data()
    );
}

rdpq_blender_t blender_modes[256] = {
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, ZERO, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, ZERO, IN_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, ZERO, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, ZERO, MEMORY_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, ZERO, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, ZERO, BLEND_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, ZERO, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((FOG_RGB, ZERO, FOG_RGB, INV_MUX_ALPHA)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, ZERO, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, ZERO, IN_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, ZERO, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, ZERO, MEMORY_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, ZERO, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, ZERO, BLEND_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, ZERO, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((FOG_RGB, ZERO, FOG_RGB, MEMORY_CVG)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, IN_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, ZERO, IN_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, IN_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, IN_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, ZERO, IN_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, ZERO, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, ZERO, MEMORY_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, BLEND_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, ZERO, BLEND_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, BLEND_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, BLEND_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, ZERO, BLEND_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, FOG_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, ZERO, FOG_RGB, ONE)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, FOG_RGB, ONE)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, FOG_RGB, ONE)),
    RDPQ_BLENDER((FOG_RGB, ZERO, FOG_RGB, ONE)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, IN_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, ZERO, IN_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, IN_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, IN_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, ZERO, IN_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, ZERO, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, ZERO, MEMORY_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, ZERO, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, ZERO, BLEND_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, IN_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, IN_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, IN_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, IN_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, FOG_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, FOG_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, FOG_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, FOG_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, SHADE_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, SHADE_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, SHADE_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, SHADE_ALPHA, FOG_RGB, ZERO)),
    RDPQ_BLENDER((IN_RGB, ZERO, FOG_RGB, ZERO)),
    RDPQ_BLENDER((MEMORY_RGB, ZERO, FOG_RGB, ZERO)),
    RDPQ_BLENDER((BLEND_RGB, ZERO, FOG_RGB, ZERO)),
    RDPQ_BLENDER((FOG_RGB, ZERO, FOG_RGB, ZERO)),
};

int main(void)
{
    display_init(RESOLUTION_320x240, DEPTH_16_BPP, 3, GAMMA_NONE, ANTIALIAS_RESAMPLE);

    rdpq_init();
    rdpq_set_mode_standard();
    rdpq_mode_antialias(true);
    rdpq_mode_combiner(RDPQ_COMBINER_FLAT);
    rdpq_set_prim_color(RGBA32(255, 0, 255, 255));

    surface_t* screen = display_get();
    rdpq_attach(screen, NULL);
    rdpq_fill_rectangle(0, 0, 320, 240);
    rdpq_set_blend_color(RGBA32(0, 255, 0, 128));
    rdpq_set_fog_color(RGBA32(0, 0, 255, 128));

    uint8_t mode = 0;
    for (int j = 0; j < 240 / TSIZE; j++)
    {
        for (int i = 0; i < 320 / TSIZE; i++)
        {
            rdpq_mode_blender(blender_modes[mode++]);
            rdpq_set_prim_color(RGBA32(0, 255, 255, 128));
            triangle(i * TSIZE, j * TSIZE);
            rdpq_mode_blender(blender_modes[mode++]);
            rdpq_set_prim_color(RGBA32(255, 255, 255, 128));
            f_triangle(i * TSIZE, j * TSIZE);
            if (mode == 0) goto out;
        }
    }

    out:
    rdpq_detach();

    surface_t copy = surface_alloc(FMT_RGBA16, 320, 240);
    uint8_t* in = (uint8_t*)screen->buffer;
    uint8_t* out = (uint8_t*)copy.buffer;
    debugf("%x\n", (uintptr_t)out);
    memcpy(out, in, 320 * 240 * 2);

    display_show(screen);
}
